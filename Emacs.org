#+title Emacs config
#+PROPERTY: header-args:emacs-lisp :tangle ~/projects/emacs/.emacs.d/init.el

* Environment Variables
#+begin_src emacs-lisp
  ;--- Environment variables ---
  ;--- Editor Styling ---
  (setq satori-font-size 200)                                   ;; font-size
  ;--- Themes ---
  (setq satori-theme 'tango-dark)
  ;--- UI Elements ---
  (setq satori-tool-bar 0)                                      ;; tool bar
  (setq satori-menu-bar 0)                                      ;; menu bar
  (setq satori-scroll-bar 0)                                    ;; scroll bar
  (setq satori-fringe-mode-padding 0)                           ;; horizontal padding
  ;; --- General Settings ---
  (setq satori-backups nil)
  ;; --- use-package ---
  (setq use-package-always-ensure t)                            ;; auto-install missing packages
  ;; --- Org Roam ---
  (setq satori-org-roam-directory "~/projects/satori-notes")    ;; org roam notes directory
  ;; --- project.el ---
 
#+end_src 
* Packages
** Todoes [0/2]
*** TODO What does package-initialise do?
*** TODO What does  (unless package-archive-contents (package-refresh-contents)) do?
** Config 
#+begin_src emacs-lisp
  (require 'package)
  (add-to-list 'package-archives
               '("melpa" . "http://melpa.org/packages/") t)

  (unless package-archive-contents (package-refresh-contents))    ;; update packages
  (package-initialize)
#+end_src
* Visuals 
** Theme
#+begin_src emacs-lisp
(load-theme satori-theme t)
#+end_src
** Font Size
#+begin_src emacs-lisp
(set-face-attribute 'default nil :height satori-font-size)
#+end_src
** UI Elements
#+begin_src emacs-lisp
(tool-bar-mode satori-tool-bar)
(menu-bar-mode satori-menu-bar)			
(scroll-bar-mode satori-scroll-bar)
(set-fringe-mode satori-fringe-mode-padding)
#+end_src
** Modeline
#+begin_src emacs-lisp
  ;; --- modeline settings ---
  (display-time-mode 1)                   ;; display time 
#+end_src
** Line Numbers
#+begin_src emacs-lisp
(global-display-line-numbers-mode t)

(defun satori-disable-line-numbers ()
   (display-line-numbers-mode 0))
#+end_src
* General Settings
** Backups
Do more testing and research on make-backup-files
#+begin_src emacs-lisp
(setq make-backup-files satori-backups)
#+end_src
** Save History
#+begin_src emacs-lisp
(use-package savehist
  :init
  (savehist-mode))
#+end_src
** Magnolia
#+begin_src emacs-lisp
  (use-package marginalia
  :ensure t
  :after vertico
  :init
  (marginalia-mode))
#+end_src
* Project Management
** project.el
** projectile
* Completion Frameworks
** Orderless
#+begin_src emacs-lisp
  (use-package orderless
  :ensure t
  :custom
  (completion-styles '(orderless basic)) ;; Add orderless for better matching
  (completion-category-defaults nil)    ;; Allow orderless for all categories
  )
#+end_src
** Helm
#+begin_src emacs-lisp :tangle no
  (use-package helm
    :ensure t
    :config
    (helm-mode 1)
    (setq helm-M-x-fuzzy-match t
          helm-buffers-fuzzy-matching t
          helm-recentf-fuzzy-match t))

    (with-eval-after-load 'helm
       (define-key helm-map (kbd "C-j") 'helm-next-line)
       (define-key helm-map (kbd "C-k") 'helm-previous-line)
       (define-key helm-map (kbd "C-h") 'helm-find-files-up-one-level)
       (define-key helm-map (kbd "C-l") 'helm-execute-persistent-action))

     (with-eval-after-load 'helm-buffers
       (define-key helm-find-files-map (kbd "C-l") 'helm-execute-persistent-action)
       (define-key helm-buffer-map (kbd "C-h") 'helm-keyboard-quit)
       (define-key helm-buffer-map (kbd "C-d") 'helm-buffer-run-kill-persistent)
       (define-key helm-buffer-map (kbd "C-o") 'helm-maybe-exit-minibuffer)
       (define-key helm-buffer-map (kbd "C-n") 'helm-buffer-switch-other-window))

     (with-eval-after-load 'helm-files
       (define-key helm-find-files-map (kbd "C-p") 'helm-execute-persistent-action))
#+end_src

#+RESULTS: 
** Vertico
#+begin_src emacs-lisp
  ;; Enable vertico
(use-package vertico
  :custom
  (vertico-scroll-margin 0) ;; Different scroll margin
  (vertico-count 10) ;; Show more candidates
  (vertico-resize t) ;; Grow and shrink the Vertico minibuffer
  (vertico-cycle t) ;; Enable cycling for `vertico-next/previous'
  :init
  (vertico-mode))
#+end_src
** Consult
#+begin_src emacs-lisp
      (use-package consult
      :ensure t
      :bind (
	     ("C-s" . consult-line)         ;; Line search, similar to Swiper
	     ("C-x b" . consult-buffer)     ;; Enhanced buffer switching
	     ("M-g g" . consult-goto-line)  ;; Go to a specific line
	     ("C-c k" . consult-ripgrep)    ;; Search files with ripgrep
	     ;;("C-c n" . consult-find)
	     )      ;; Find files in the current directory
      :custom
      (consult-preview-key 'any)            ;; Preview results as you navigate
      (consult-narrow-key "<")              ;; Narrow options while searching
      :init
      ;; Configure project root detection
      (setq consult-project-root-function
	    (lambda ()
	      (when-let (project (project-current))
		(car (project-roots project))))))
#+end_src
* Search
** helm-swoop (active)
#+begin_src emacs-lisp :tangle no
  (use-package helm-swoop
    :ensure t
    :bind (("M-s s" . helm-swoop)  ;; Search in the current buffer
           ("M-s S" . helm-multi-swoop)  ;; Search across multiple buffers
           ("M-s p" . helm-multi-swoop-projectile))  ;; Search in project (if projectile is used)
    :config
    (setq helm-swoop-speed-or-color t)  ;; Enable faster searching
    (setq helm-swoop-use-fuzzy-match t))  ;; Enable fuzzy matching
(with-eval-after-load 'helm-swoop
  (define-key helm-swoop-map (kbd "j") 'helm-next-line)   ;; Move down
  (define-key helm-swoop-map (kbd "k") 'helm-previous-line) ;; Move up
  (define-key helm-swoop-map (kbd "h") 'backward-char)    ;; Move left
  (define-key helm-swoop-map (kbd "l") 'forward-char)     ;; Move right
  (define-key helm-swoop-map (kbd "C-l") 'helm-maybe-exit-minibuffer) ;; Select entry
  (define-key helm-swoop-map (kbd "C-o") 'helm-swoop-other-window)    ;; Open in new window
  (define-key helm-swoop-map (kbd "C-d") 'helm-swoop-kill)) ;; Kill selected match

#+end_src
* Plugins 
** Org Roam 
#+begin_src emacs-lisp
  (use-package org-roam
    :bind(("C-c n l" . org-roam-buffer-toggle)
          ("C-c n f" . org-roam-node-find)
          ("C-c n i" . org-roam-node-insert)
          ("C-c d c" . org-roam-dailies-capture-today)
          ("C-c d s" . org-roam-dailies-goto-today)
          )
    :config
    (setq org-roam-directory satori-org-roam-directory))
#+end_src
* Org-mode
** Styling
*** Bullets
#+begin_src emacs-lisp
  (use-package org-bullets
  :after org
  :hook (org-mode . org-bullets-mode)
  :custom
  (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
#+end_src
*** Fonts
#+begin_src emacs-lisp
   ;; Increase the size of various headings
  (set-face-attribute 'org-document-title nil :font "Cantarell" :weight 'bold :height 1.3)

  (dolist (face '((org-level-1 . 1.2)
                  (org-level-2 . 1.1)
                  (org-level-3 . 1.05)
                  (org-level-4 . 1.0)
                  (org-level-5 . 1.1)
                  (org-level-6 . 1.1)
                  (org-level-7 . 1.1)
                  (org-level-8 . 1.1)))
    (set-face-attribute (car face) nil :font "Cantarell" :weight 'medium :height (cdr face)))
#+end_src
** Hooks
#+begin_src emacs-lisp
   (add-hook 'org-mode-hook 'satori-disable-line-numbers)
#+end_src
* Hooks
** eshell
#+begin_src emacs-lisp
(add-hook 'eshell-mode-hook 'satori-disable-line-numbers)
#+end_src
* Global Keybindins
#+begin_src emacs-lisp :tangle no
  (global-set-key (kbd "C-x C-f") 'helm-find-files)  ;; Find files
  (global-set-key (kbd "C-M-j") 'helm-buffers-list)  ;; Buffer list
  (global-set-key (kbd "M-x") 'helm-M-x)            ;; Replace M-x with Helm
  (global-set-key (kbd "C-s") 'helm-occur)
#+end_src
* Custom Functions
** Calculate TODOes progress in org file
#+begin_src emacs-lisp
(defun satori-calculate-org-progress ()
  "Calculate the overall progression percentage for TODO and DONE entries in the current Org buffer."
  (interactive)
  (let ((total-tasks 0)
        (completed-tasks 0))
    ;; Count all TODO and DONE entries in the buffer
    (org-map-entries
     (lambda ()
       (setq total-tasks (1+ total-tasks))
       (when (string= (org-get-todo-state) "DONE")
         (setq completed-tasks (1+ completed-tasks)))))
    ;; Calculate the percentage
    (let ((progress (if (> total-tasks 0)
                        (* 100 (/ (float completed-tasks) total-tasks))
                      0)))
      (message "Total Progression: %.2f%% (%d/%d completed)"
               progress completed-tasks total-tasks)
      progress)))

#+end_src
